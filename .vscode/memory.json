{"type":"entity","entityType":"Project","name":"egui_kittest_demo","observations":["Rust 2024 edition GUI demo using egui and eframe with egui_kittest-based tests","Focus: reactive layouts, accessibility, clarity, and snapshot testing to let the agent “see” UI results","Dev-deps: egui_kittest 0.32 with features wgpu, snapshot, eframe","Snapshot tests live in tests/snapshots and are updated with UPDATE_SNAPSHOTS=true cargo test","Targeted responsive UI patterns added: top menu bar, left side panel, adaptive form layout (stack vs inline), responsive card grid"]}
{"type":"entity","entityType":"Tool","name":"rust-mcp-server","observations":["Provides Cargo operations (fmt, check, clippy, test, build, add, remove, etc.) available to the agent without a local terminal","Use cargo-fmt for formatting, cargo-clippy for lints (warnings as errors optional), cargo-test for unit/integration/snapshot tests","Prefer running check before build; run tests with -- --nocapture when debugging","Supports feature flags via --features for dev-deps like egui_kittest"]}
{"type":"entity","entityType":"Tool","name":"memory tool","observations":["Knowledge graph memory for storing project context, decisions, and conventions across sessions","Record project conventions: keep tests for each feature, respect accessibility/AccessKit roles, prefer Harness::builder for sizing, use Harness::set_size for resize tests","Store commands and decisions so next sessions follow same standards"]}